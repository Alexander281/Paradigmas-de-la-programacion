                                             Paradigmas de Programacion
Un paradigma de programacion es un estilo de desarollo de programas, es decir un modelo para resolver problemas
computacionales. Los lenguajes de programacion necesariamente, se encuadran en uno o varios paradigmas a la vez a partir 
de tipos de ordenes que permiten implementar algo que tienen su relacion directa con su sintaxis.
Principales paradigmas de programacion

Imperativo

Los programas se componen de un conjunto de sentencias que cambian su estado. Son secuencias de comandos que ordenan
acciones a la computadora. Al no tener ninguna declaracion en absoluto, basandose puramente en comandos, incluso hasta el
punto de hacer que los IF y ELSE comandos independientes el uno del otro, conectados solo por una variable intriseca
denominada test.COBOL y BASIC eran dos intentos de hacer sintaxis de programacion se parecen mas a ingles.

Caracteristicas

# Describe como debe realizarse el calculo, no el porque.
# La sentencia principal es la asignacion
# Las celdas de memoria que contienen datos, puede ser modificadas y representan el estado de programa.

                                                Paradigma logico
la programacion logica estudia el uso de la logica para el plantiamiento de problemas y el control sobre las reglas de inferencia
para alcanzar la solucion automatica.
Logica(programador):hechos y reglas para representar conocimmiento
control(interprete):deduccion logica para dar respuestas (soluciones)

Caracteristicas del Paradigma Logico

*ubicacion de terminos
*mecanismos de inferencia automatica
*recursion como estructuta de control basica
*vision logica de la computacion

Ventajas del Paradigma Logico.

*relaciones multiproposito
*sencillez en la implementacion de estructuras complejas
*generacion rapida de prototipos e ideas complejas

Desventajas del Paradigma Logico.

*inferencia limitada por su base de conocimiento
*en problemas reales es poco utilizado
*existen muy pocas herramientas de depuracion,en su mayoria pocas efectivas.

Aplicaciones del Paradigma Logico

*desarrollo de aplicaciones de inteligencia artificial
*prueba de teoremas de forma automatica
*procesamiento de lenguaje natural 




**************************************************************************************************************************
Programación declarativa, en contraposición a la programación imperativa, es un paradigma de programación que está 
basado en el desarrollo de programas especificando o "declarando" un conjunto de condiciones, proposiciones, afirmaciones,
restricciones, ecuaciones o transformaciones que describen el problema y detallan su solución. La solución es obtenida 
mediante mecanismos internos de control, sin especificar exactamente cómo encontrarla (tan solo se le indica a la 
computadora qué es lo que se desea obtener o qué es lo que se está buscando).
No existen asignaciones destructivas, y las variables son utilizadas con transparencia referencial

DIFERENCIA ENTRE IMPERATIVO Y DECLARATIVO
En la programación imperativa se describe paso a paso un conjunto de instrucciones que deben ejecutarse para variar el esta
do del programa y hallar la solución, es decir, un algoritmo en el que se describen los pasos necesarios para solucionar 
el problema.
En la programación declarativa las sentencias que se utilizan lo que hacen es describir el problema que se quiere 
solucionar; se programa diciendo lo que se quiere resolver a nivel de usuario, pero no las instrucciones necesarias para 
solucionarlo. Esto último se realizará mediante mecanismos internos de inferencia de información a partir de la 
descripción realizada.

TIPOS
Existen varios tipos de lenguajes declarativos:

Los lenguajes lógicos, como Prolog.
Los lenguajes algebraicos, como Maude y SQL.
Los lenguajes funcionales, como Haskell y Erlang.

VENTAJAS 
Se ha dicho que los lenguajes declarativos tienen la ventaja de ser razonados matemáticamente, lo que permite el uso de 
mecanismos matemáticos para optimizar el rendimiento de los programas.
Son fiables y expresivos.



Describe que se debe cálcular, sin explicitar el cómo.
z No existe un orden de evaluación prefijado.
z Las variables son nombres asociados a definiciones, y
una vez instanciadas son inmutables.
z No existe sentencia de asignación.
z El control de flujo suele estar asociado a la composición
funcional, la recursividad y/o técnicas de reescritura y
unificación.
z Existen distintos grados de pureza en las variantes del paradigma.
z Las principales variantes son los paradigmas funcional, lógico, la
programación reactiva y los lenguajes descriptivos.

***************************************************************************************************************************
PARADIGMA FUNCIONAL
En el área de informatica nosotros llamamos programación funcional a un paradigma de pregramación declarativa que se basa en
el uso de funciones matemáticas, en contraste con a programación impertiva, que enfatiza los cambios de estado mediante la 
mutacion de variables.
La progrmacion funcional surge de un sistema formla creado en el año 1930 y conocido como Calculo Lamda, que servía para la 
investigación de as definiciones de funciones, su aplicación y su recurción. 

Al momento de realizar la práctica podemos observar a diferencia entre el uso de una función empleada en la programación 
imperativa y una función matemática, y es que en las funciones imperativas pueden existir cambios secundarios, como el cambio
de valores en calculos ya realizados con anterioridad; dado este resultado se pude decir que la expresión sintáctica puede 
darnos como resultado varios reltados diferentes en varios momentos durante la ejecución del programa.

A lo largo del tiempo la programació funcional, especialmente aquellos puramente funcionales, han sido utilizados en su gran 
mayoría para el desarrollo académico, y en muy pocas ocasiones en el ámbito industrial y comercial; no obstante en estos 
últimos se han empleado lenguajes funcionales tales como Scheme, Erlang, Rust, Objetive, Calm, Scala, F# y Haskell; La 
programación funcional también es utilizada en la industria a través de lenguajes de dominio específico como R (estadística), 
Mathematica (matemáticas simbólicas), J y K (análisis financiero).
 
Entre los lenguajes utilizados con más frecuecia tenemos: 
SQL:  lenguaje de dominio específico utilizado en programación, diseñado para administrar, y recuperar información de sistemas 
de gestión de bases de datos relacionales.
LEX/YACC: es un programa para generar analizadores léxicos. Lex se utiliza comúnmente con el programa yacc que se utiliza para 
generar análisis sintáctico. 
Estos lenguajes utilizan algunos elementos de programacion funcional, en especial al momento de procesar valores mutables.

La programación funcional también puede ser desarrollada en lenguajes que no están diseñados específicamente para la programación 
funcional. En el caso de Perl, por ejemplo, que es un lenguaje de programación imperativo, existe un libro que describe como 
aplicar conceptos de programación funcional. JavaScript, uno de los lenguajes más ampliamente utilizados en la actualidad, 
también incorpora capacidades de programación funcional. Python también incorpora particularidades de los lenguajes funcionales 
como listas de comprensión y funciones de tratamiento de listas como matemática de conjuntos. Java en su versión 8, está incorporando 
la programación funcional, así como el uso de las expresiones lambda.

CARACTERISTICAS: 
-Los programas escritos en un lenguaje funcional están constituidos únicamente por definiciones de funciones, entendiendo estas no 
como subprogramas clásicos de un lenguaje imperativo, sino como funciones puramente matemáticas, en las que se verifican ciertas 
propiedades como la transparencia referencial (el significado de una expresión depende únicamente del significado de sus subexpresiones),
 y por tanto, la carencia total de efectos colaterales. 
-existencia de asignaciones de variables y la falta de construcciones estructuradas como la secuencia o la iteración (lo que obliga en la 
práctica a que todas las repeticiones de instrucciones se lleven a cabo por medio de funciones recursivas).
-Existen dos grandes categorías de lenguajes funcionales: los funcionales puros y los híbridos. La diferencia entre ambos estriba en que 
los lenguajes funcionales híbridos son menos dogmáticos que los puros, al admitir conceptos tomados de los lenguajes imperativos, como las 
secuencias de instrucciones o la asignación de variables. En contraste, los lenguajes funcionales puros tienen una mayor potencia expresiva, 
conservando a la vez su transparencia referencial, algo que no se cumple siempre con un lenguaje funcional híbrido. 

UTILIDAD:
Como objetivo está la optención de lenguajes expresivos y "matemáticamente elgantes", en los cuales no se requiera volver al nivel de una 
máquina de escribir para que estos puedan ejecutar el programa.La secuencia de computaciones llevadas a cabo por el programa se rige única 
y exclusivamente por la reescritura de definiciones más amplias a otras cada vez más concretas y definidas, usando lo que se denominan 
"definiciones dirigidas".
